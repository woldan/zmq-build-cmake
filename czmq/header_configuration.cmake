cmake_minimum_required(VERSION 2.8)

function(set_configuration_variables)
  # .. set system ID ..
  if (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    set(CZMQ_HAVE_OSX TRUE PARENT_SCOPE)
  elseif (CMAKE_SYSTEM_NAME STREQUAL "Windows")
    set(CZMQ_HAVE_WINDOWS TRUE PARENT_SCOPE)
  elseif (CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(CZMQ_HAVE_LINUX TRUE PARENT_SCOPE)
  elseif (CMAKE_SYSTEM_NAME STREQUAL "Solaris")
    set(CZMQ_HAVE_SOLARIS TRUE PARENT_SCOPE)
  endif ()

  # .. set platform dependent type definitions ..
  if (WIN32)
    add_definitions(-D__WINDOWS__)
    set(mode_t "int")
  endif (WIN32)

  # .. set "found header X" variables ..
  find_file(HAVE_ARPA_INET_H   NAMES "arpa/inet.h")
  find_file(HAVE_DLFCN_H       NAMES "dlfcn.h")
  find_file(HAVE_ERRNO_H       NAMES "errno.h")
  #find_file(HAVE_FREEIFADDRS   TODO)
  #find_file(HAVE_GETIFADDRS    TODO)
  #find_file(HAVE_GETTIMEOFDAY  TODO)
  find_file(HAVE_IFADDRS_H     NAMES "ifaddrs.h")
  find_file(HAVE_INTTYPES_H    NAMES "inttypes.h")
  find_package(Threads)
  if (CMAKE_USE_PTHREADS_INIT)
    set(HAVE_LIBPTHREAD TRUE)
  endif (CMAKE_USE_PTHREADS_INIT)
  #find_file(HAVE_LIBSODIUM    TODO)
  set(HAVE_LIBZMQ TRUE)
  find_file(HAVE_LINUX_WIRELESS_H NAMES "linux/wireless.h")
  find_file(HAVE_MEMORY_H         NAMES "memory.h")
  #find_file(HAVE_MEMSET TODO)
  find_file(HAVE_NETINET_IN_H     NAMES "netinet/in.h")
  find_file(HAVE_NETINET_TCP_H    NAMES "netinet/tcp.h")
  find_file(HAVE_NET_IF_H         NAMES "net/if.h")
  find_file(HAVE_NET_IF_MEDIA_H   NAMES "net/if_media.h")
  #find_file(HAVE_PERROR           TODO)
  #find_file(HAVE_STDBOOL_H        TODO)
  find_file(HAVE_STDDEF_H         NAMES "stddef.h")
  find_file(HAVE_STDINT_H         NAMES "stdint.h")
  find_file(HAVE_STDLIB_H         NAMES "stdlib.h")
  find_file(HAVE_STRINGS_H        NAMES "strings.h")
  find_file(HAVE_STRING_H         NAMES "string.h")
  find_file(HAVE_SYS_SOCKET_H     NAMES "sys/socket.h")
  find_file(HAVE_SYS_STAT_H       NAMES "sys/stat.h")
  find_file(HAVE_SYS_TIME_H       NAMES "sys/time.h")
  find_file(HAVE_SYS_TYPES_H      NAMES "sys/types.h")
  find_file(HAVE_UNISTD_H         NAMES "unistd.h")
  find_file(HAVE_WINDOWS_H        NAMES "windows.h")
endfunction(set_configuration_variables)

function(configure_platform_header input output)
  set_configuration_variables()

  # .. generate configured header ..
  configure_file(${input} ${output})
endfunction(configure_platform_header)
